<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:jersey="http://www.mulesoft.org/schema/mule/jersey"
	xmlns:wmq="http://www.mulesoft.org/schema/mule/ee/wmq" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/jersey http://www.mulesoft.org/schema/mule/jersey/current/mule-jersey.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/wmq http://www.mulesoft.org/schema/mule/ee/wmq/current/mule-wmq-ee.xsd">
	<validation:config name="Validation_Configuration"
		doc:name="Validation Configuration" />
	<file:file-to-string-transformer
		returnClass="java.lang.String" name="File_to_String" doc:name="File to String" />
	<file:connector name="File" writeToDirectory="${filePath}"
		readFromDirectory="${filePath}" workDirectory="${filePath}"
		autoDelete="false" outputAppend="true" streaming="true"
		validateConnections="true" doc:name="File" serialiseObjects="true"
		outputPattern="deviceMapping.txt" />
	<object-to-byte-array-transformer
		name="Object_to_Byte_Array" doc:name="Object to Byte Array" encoding="US-ASCII"
		mimeType="text/plain" />
	<byte-array-to-serializable-transformer
		name="Byte_Array_to_Serializable" doc:name="Byte Array to Serializable"
		encoding="US-ASCII" mimeType="text/plain" />
	<spring:beans>
		<spring:bean id="DeviceInformationTransformer" name="DeviceInformationTransformer"
			class="com.cognizant.transformer.RegisterDeviceToFileTransformer"
			scope="singleton" />
		<spring:bean id="retrieveFileContent" name="RetrieveFileContent"
			class="com.cognizant.util.RetrieveFileContent" scope="singleton" />

		
        <spring:bean id="objectMapper" name="ObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" scope="singleton"/>
	</spring:beans>
	<http:request-config basePath='service'
		doc:name='HTTP Request Configuration' host='0.0.0.0'
		name='HTTP_Request_Configuration_Global' port='${http.port}' />
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="${http.port}" basePath="service" doc:name="HTTP Listener Configuration"/>

	<flow name="DeviceConfigurationFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/api/booking/device/info" allowedMethods="POST" doc:name="Registed Device Id">
			<http:response-builder statusCode="200" />
			<http:error-response-builder statusCode="400"
				reasonPhrase="Bad Request" />
		</http:listener>
        <echo-component doc:name="Echo"/>
		<choice doc:name="Validates Payload and Proceed Forward">
			<when expression="!(payload == null)">
		
				<json:json-to-object-transformer
					returnClass="com.cognizant.orchestration.dto.DeviceInformation"
					mapper-ref="objectMapper" doc:name="Create RegisterDeviceRequest" />

					
				<file:outbound-endpoint path="${filePath}"
					outputPattern="deviceMapping.txt" responseTimeout="10000"
					doc:name="Store device id in file" connector-ref="File"
					disableTransportTransformer="true" encoding="US-ASCII" mimeType="text/plain" />
				<dw:transform-message metadata:id="5430432f-c833-47ca-a88c-d29a4b3301f6"
					doc:name="Transform Message">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: "Device registered successfully",
	success: true
} as :object {
	class : "com.cognizant.dto.BaseResponse"
}]]></dw:set-payload>
				</dw:transform-message>

			</when>
			<otherwise>
				<scripting:transformer
					returnClass="com.cognizant.orchestration.exception.BookingApplException"
					doc:name="Throw Exception">
					<scripting:script engine="Groovy"><![CDATA[throw new com.cognizant.orchestration.exception.BookingApplException("Please provide a valid input");]]></scripting:script>
				</scripting:transformer>
			</otherwise>
		</choice>
	</flow>
	<flow name="RetrieveDeviceDetailsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/api/booking/device/info" allowedMethods="GET"
			doc:name="Retrieve Device Details">
			<http:error-response-builder statusCode="400"
				reasonPhrase="Bad Request" />
		</http:listener>

		<validation:is-not-empty config-ref="Validation_Configuration"
			value="#[message.inboundProperties['http.query.params'].assetId]"
			message="Please specify the Device Id" exceptionClass="com.cognizant.orchestration.exception.BookingApplException"
			doc:name="Check empty Device Id" />

		<invoke name="RetrieveFileContent" object-ref="retrieveFileContent"
			method="getFileContent" methodArguments="${filePath}/deviceMapping.txt, #[message.inboundProperties['http.query.params'].assetId],  #[message.inboundProperties['http.query.params'].uuid],  #[message.inboundProperties['http.query.params'].region]"
			methodArgumentTypes="java.lang.String, java.lang.String, java.lang.String, java.lang.String" doc:name="RetrieveFileContent" />
		<choice doc:name="Forward Device Info for Transformation, If empty throw Exception">
			<when expression="#[payload.assetId != null]">
				<dw:transform-message metadata:id="be996efb-6b4d-4b00-ac1d-1a259f6c716a"
					doc:name="Transform Message">
					<dw:input-payload mimeType="application/java"/>
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	deviceInfo: {
	assetId:payload.assetId,
	region:payload.region,
	uuid:payload.uuid,
	message:payload.message,
	longitude:payload.longitude,
	latitude:payload.latitude,
	locationDetails:payload.locationDetails
	},
	success: true,
	message:null
} as :object {
	class : "com.cognizant.orchestration.dto.RegisterDeviceResponse"
}]]></dw:set-payload>
				</dw:transform-message>
			</when>
			<otherwise>
				<scripting:transformer
					returnClass="com.cognizant.orchestration.exception.BookingApplException"
					doc:name="Throw Exception">
					<scripting:script engine="Groovy"><![CDATA[throw new com.cognizant.orchestration.exception.BookingApplException("Please provide a valid input");]]></scripting:script>
				</scripting:transformer>
			</otherwise>
		</choice>
	</flow>


</mule>